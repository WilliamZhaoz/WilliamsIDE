####################################
# add tow lines into ~/.bashrc to auto switch to your conda env when you open tmux.
# source /home/username/anaconda3/etc/profile.d/conda.sh
# [[ -z $TMUX ]] || conda deactivate; conda activate william(your conda name)

# #### William Zhao's .tmux.conf
# Global
####################################
# Tmux Prefix
unbind C-b
set -g prefix C-x

# Unbind default suspend
unbind C-z
bind C-q confirm-before -p "suspend-client #W? (y/n)" suspend-client

# edit configuration
bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"
# reload this on 'r'
bind r source-file ~/.tmux.conf \; display 'Reloaded.'

# terminal
set -g set-titles on                      # try to set wm window titles with xterm codes
set -g set-titles-string "#H:#S.#I.#P #W #T"
set -g default-terminal "screen-256color" # colour support
setw -g xterm-keys on
set -g history-limit 50000

# Shorten input delay (tmux normally adds a short delay on inputs)
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on                    # If we want Vim to be told about focus: http://git.io/2UqSgQ
set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

# bells and monitoring
set -g visual-silence on
set -g visual-bell on
set -g bell-action any

# activity
set -g monitor-activity on
set -g visual-activity off

set -g mouse on               # Enable mouse support

####################################
# UI
####################################
set -g status-interval 10     # redraw status line every 10 seconds
# statusbar
set-option -g status on
set-option -g status-interval 2
set-option -g status-justify "centre"
set-option -g status-left-length 60
set-option -g status-right-length 90
# set-option -g status-left "#(~/.tmux-powerline/powerline.sh left)"
# set-option -g status-right "#(~/.tmux-powerline/powerline.sh right)"
set-option -g status-bg black #base02
set-option -g status-fg white #yellow
set-option -g status-attr default
set-window-option -g window-status-current-format "#I. #W"
set -g status-left '[#(whoami),#H]'
set -g status-left '#[bg=#666666] [#S] #[default] ' 
set -g status-right '[#(date +"%Y-%m-%d %H:%M:%S ")]'
set -g status-right '#[fg=white,bg=#55bb00] [#h] #[fg=white,bg=#009c00] %Y-%m-%d #[fg=white,bg=#007700] %H:%M:%S '
set -g status-right '#[fg=white,bg=#444444] [#h] #[fg=white,bg=#666666] %Y-%m-%d #[fg=white,bg=#888888] %H:%M:%S '")'"


# default window title colors
set-window-option -g window-status-fg brightblue #base0
set-window-option -g window-status-bg default

# active window title colors
set-window-option -g window-status-current-fg white #orange
set-window-option -g window-status-current-bg default

# pane border
set-option -g pane-border-fg black #base02
set-option -g pane-active-border-fg white #base01

# message text
set-option -g message-bg black #base02
set-option -g message-fg brightred #orange

# pane number display
set-option -g display-panes-active-colour blue #blue
set-option -g display-panes-colour brightred #orange

# clock
set-window-option -g clock-mode-colour green #green

# fix resizing
setw -g aggressive-resize on

####################################
# Session
####################################
# find session
bind -r f command-prompt -p find-session 'switch-client -t %%'

bind -r n command-prompt "new-session -s'%%'"

####################################
# Window
####################################
set -g base-index 1           # start windows numbering at 1
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

# window navigation
bind -r C-w        confirm-before -p "kill-window #W? (y/n)" kill-window  # kill window

# window navigation
bind -r Tab last-window     # move to last active window
bind -r [   previous-window # select previous window
bind -r ]   next-window     # select next window

# split or new window path perserve
bind -r s split-window -v 
bind -r v split-window -h 

# Ctrl-Shift-Left/Right: Move window
bind -r C-[ swap-window -t -1
bind -r C-] swap-window -t +1

####################################
# Pane
####################################
setw -g pane-base-index 1     # make pane numbering consistent with windows
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# pane navigation
bind -r h select-pane -L  # move left
bind -r l select-pane -R  # move right
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up

bind -r left  select-pane -L  # move left
bind -r up    select-pane -D  # move down
bind -r down  select-pane -U  # move up
bind -r right select-pane -R  # move right

bind -r , swap-pane -D   # swap current pane with the next one
bind -r . swap-pane -U   # swap current pane with the previous one

bind -r Space last-pane      # move last pane
bind -r C-p confirm-before -p "kill-pane #P? (y/n)" kill-pane  # kill pane

# Resize pane
bind -r C-h resize-pane -L 2
bind -r C-j resize-pane -D 2
bind -r C-k resize-pane -U 2
bind -r C-l resize-pane -R 2

bind -r C-left  resize-pane -L 2
bind -r C-up    resize-pane -U 2
bind -r C-down  resize-pane -D 2
bind -r C-right resize-pane -R 2


# Synchronize
bind -r "`" setw synchronize-panes on
bind -r "~" setw synchronize-panes off


# make scrolling with wheels work
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

####################################
# list choice (tmux < 2.4)
####################################
# vi copying
setw -g mode-keys vi
# vi-choice is gone in tmux >= 2.4
run -b 'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'
run -b 'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'
run -b 'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'
####################################
# edit mode (tmux < 2.4)
####################################
# vi-edit is gone in tmux >= 2.4
run -b 'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit q cancel 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit Escape cancel 2> /dev/null || true'
####################################
####################################
#  copy mode
####################################
bind Enter copy-mode # enter copy mode
bind b list-buffers  # list paster buffers
bind p paste-buffer  # paste from the top pate buffer
bind P choose-buffer # choose which buffer to paste from
run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'
# copy to Mac OSX pasteboard
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run"tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# fix pbcopy/pbpaste
if 'command -v reattach-to-user-namespace >/dev/null' \
    'set -gq @osx-pasteboard true'
if 'tmux show -gv @osx-clipboard' \
    'set -g default-command "reattach-to-user-namespace -l $SHELL"'
# Copy top of tmux paste buffer stack to OS clipboard.
# Alternatively, this will always immediately copy to system pasteboard:
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
if 'tmux show -gv @osx-clipboard' \
    'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

####################################
# Plugin
####################################
# urlview
bind u run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"

# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @tpm_plugins '              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-sensible       \
  tmux-plugins/tmux-copycat        \
  tmux-plugins/tmux-yank           \
  tmux-plugins/tmux-urlview        \
'

# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# resurrect
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'

# continuum
set -g @continuum-restore 'on'
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'iterm,fullscreen'

####################################
# user defined overrides
####################################




# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'
